# Dataset and Splits
data_root: DATA
dataset_class: pydgn.data.dataset.TUDatasetInterface
dataset_name:  PROTEINS
data_splits_file:  DATA_SPLITS/CHEMICAL/PROTEINS/PROTEINS_outer10_inner1.splits


# Hardware
device:  cpu
max_cpus:  4
max_gpus: 0
gpus_per_task:  1


# Data Loading
dataset_getter: incremental_provider.IncrementalDataProvider
data_loader:
  class_name: torch_geometric.loader.DataLoader
  args:
    num_workers : 0
    pin_memory: False


# Reproducibility
seed: 42


# Experiment
result_folder: RESULTS
exp_name: icgmm_alpha_gamma_seq_classifier
experiment: icgmm_classifier_task.ClassifieriCGMMTask
higher_results_are_better: True
evaluate_every: 1
final_training_runs: 1

grid:
  layer_config:
    embeddings_folder: iCGMM_FULL_AUTO_RESULTS/iCGMM_SEQ_EMBEDDINGS
    checkpoint: False
    batch_size:
      - 99999999999999  # DO NOT CHANGE THIS
    shuffle:
      - False  # MUST STAY FALSE TO PRESERVE ORDERING OF NODES! OW IT WON'T WORK
    previous_layers_to_use:
      - "1"
    concatenate_on_axis: -1 # ?xAxCcurr
    #hyperprior: 1.  # hyper-prior of the prior distribution H. Works for Categorical for the moment. Use uniform prior
    gamma_prior_params:
      a:
        - 1
        #- 100
        #- 0.01
      b:
        #- 1
        #- 100
        - 0.01
    alpha_prior_params:
      a:
        - 1
        # - 100
        # - 0.01
      b:
        #- 1
        #- 100
        - 0.01
    max_C: 100
    max_layers:
      - 20
    layers:
      - 5
      - 10
      - 15
      - 20
    emission_distribution:
      class: bayesian_nonparametric.BNPCategoricalBatch
      prior_params:
        alpha: 1
    unibigram:
      - True
    aggregation:
      - sum
      - mean
    sample_neighboring_macrostate: # how to assign observation to a group 1,...,C_{l-1}
      - False  # deterministic group choice based on most probable state
    epochs:
      - 2
    engine:
      - class_name: icgmm_engine.IncrementalGibbsSamplingEngine
        args:
          engine_callback: icgmm_engine_callback.iCGMMEngineCallback
    loss:
      - icgmm_loss.iCGMMLoss
    optimizer:
      - icgmm_optimizer.iCGMMOptimizer
    scorer:
      - class_name: pydgn.training.callback.metric.MultiScore
        args:
          # used at model selection time. Should be the one on which to perform early stopping
          main_scorer: icgmm_score.iCGMMCompleteLikelihoodScore
          likelihood2: icgmm_score.iCGMMCompleteLikelihoodScore2
          C_scorer: icgmm_score.iCGMMCurrentStates
          alpha_scorer: icgmm_score.iCGMMCurrentAlpha
          gamma_scorer: icgmm_score.iCGMMCurrentGamma
    #plotter:
    #  - pydgn.training.callback.plotter.Plotter

    arbitrary_function_config: # Define the information for the arbitrary function
      shuffle: True
      batch_size:
        - 32
      checkpoint: True

      num_dataloader_workers: 0  # > 0 only with --debug option and GPU device
      pin_memory: False  # True only with --debug option and GPU device
      device: cpu
      epochs:
        - 2000
      hidden_units:
        - 32
        - 128
      optimizer:
        - class_name: pydgn.training.callback.optimizer.Optimizer
          args:
            optimizer_class_name: torch.optim.Adam
            lr:
              - 0.001
            weight_decay:
              - 0.
              - 0.0005
      loss:
        - pydgn.training.callback.metric.MulticlassClassification
      scorer:
        - pydgn.training.callback.metric.MulticlassAccuracy
      predictor:
        - predictor.SimpleMLPGraphPredictor
      engine:
        - pydgn.training.engine.TrainingEngine
      early_stopper:
        - class_name:
            - pydgn.training.callback.early_stopping.PatienceEarlyStopper
          args:
            patience:
              - 300
            monitor: validation_Multiclass Accuracy # (train_,validation_)[name_of_the_scorer_or_loss_to_monitor]
            mode: max
            checkpoint: True
      plotter:
        - pydgn.training.callback.plotter.Plotter
